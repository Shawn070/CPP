// 4_4(类的组合).cpp : 定义控制台应用程序的入口点。
// 线段(Line)类

#include "stdafx.h"
#include <iostream>
using namespace std;

class Point							//Point类的定义
{
public:								//外部接口
	Point(int xx = 0, int yy = 0)	//构造函数
	{
		x = xx;
		y = yy;
	}
	Point(Point &p);				//复制构造函数
	int getX() { return x; }
	int getY() { return y; }
private:							//私有数据
	int x, y;
};

Point::Point(Point &p)				//复制构造函数
{
	x = p.x;
	y = p.y;
	cout << "Calling the copy constructor of Point" << endl;
}

//类的组合
class Line {						//Line类的定义
public:
	Line(Point xp1, Point xp2);
	Line(Line &l);
	double getLen() { return len; }
private:
	Point p1, p2;					//Point类的对象p1, p2
	double len;
};

//组合类的构造函数
Line::Line(Point xp1, Point xp2) : p1(xp1), p2(xp2) {
	cout << "Calling constructor of Line" << endl;
	double x = static_cast<double>(p1.getX() - p2.getX());
	double y = static_cast<double>(p1.getY() - p2.getY());
	len = sqrt(x*x + y*y);
}

//组合类的复制构造函数
Line::Line(Line &l) : p1(l.p1), p2(l.p2) {
	cout << "Calling the copy constructor of Line" << endl;
	len = l.len;
}

int main()
{
	Point myp1(1, 1), myp2(4, 5);					//建立 Point 类的对象
	Line line(myp1, myp2);							//建立 Line 类的对象
	Line line2(line);								//利用复制构造函数建立一个新对象
	cout << "The length of the Line is: ";
	cout << line.getLen() << endl;
	cout << "The length of the line2 is: ";
	cout << line2.getLen() << endl;
    return 0;
}

/*
	运行结果：
	Calling the copy constructor of Point
	Calling the copy constructor of Point
	Calling the copy constructor of Point
	Calling the copy constructor of Point
	Calling constructor of Line
	Calling the copy constructor of Point
	Calling the copy constructor of Point
	Calling the copy constructor of Line
	The length of the Line is: 5
	The length of the line2 is: 5
*/